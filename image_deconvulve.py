import numpy as np
import matplotlib.pyplot as plt

## This code istrying to rebuild https://reference.wolfram.com/language/ref/ImageDeconvolve.html

gaussian_matrix_10_from_wolfram = np.array([[0.000123437 , 0.000180187 , 0.000253172 , 0.000342216 , 0.000444813 , 0.000555727 , 0.000667103 , 0.0007692 , 0.000851711 , 0.000905473 , 0.000924149 , 0.000905473 , 0.000851711 , 0.0007692 , 0.000667103 , 0.000555727 , 0.000444813 , 0.000342216 , 0.000253172 , 0.000180187 , 0.000123437],
[0.000180187 , 0.000263026 , 0.000369566 , 0.000499549 , 0.000649313 , 0.000811219 , 0.0009738 , 0.00112283 , 0.00124328 , 0.00132176 , 0.00134902 , 0.00132176 , 0.00124328 , 0.00112283 , 0.0009738 , 0.000811219 , 0.000649313 , 0.000499549 , 0.000369566 , 0.000263026 , 0.000180187],
[0.000253172 , 0.000369566 , 0.000519259 , 0.000701891 , 0.000912318 , 0.0011398 , 0.00136824 , 0.00157764 , 0.00174687 , 0.00185714 , 0.00189544 , 0.00185714 , 0.00174687 , 0.00157764 , 0.00136824 , 0.0011398 , 0.000912318 , 0.000701891 , 0.000519259 , 0.000369566 , 0.000253172],
[0.000342216 , 0.000499549 , 0.000701891 , 0.000948759 , 0.0012332 , 0.00154069 , 0.00184947 , 0.00213252 , 0.00236128 , 0.00251033 , 0.00256211 , 0.00251033 , 0.00236128 , 0.00213252 , 0.00184947 , 0.00154069 , 0.0012332 , 0.000948759 , 0.000701891 , 0.000499549 , 0.000342216],
[0.000444813 , 0.000649313 , 0.000912318 , 0.0012332 , 0.00160291 , 0.00200259 , 0.00240394 , 0.00277185 , 0.00306919 , 0.00326292 , 0.00333022 , 0.00326292 , 0.00306919 , 0.00277185 , 0.00240394 , 0.00200259 , 0.00160291 , 0.0012332 , 0.000912318 , 0.000649313 , 0.000444813],
[0.000555727 , 0.000811219 , 0.0011398 , 0.00154069 , 0.00200259 , 0.00250194 , 0.00300337 , 0.00346302 , 0.00383449 , 0.00407653 , 0.00416061 , 0.00407653 , 0.00383449 , 0.00346302 , 0.00300337 , 0.00250194 , 0.00200259 , 0.00154069 , 0.0011398 , 0.000811219 , 0.000555727],
[0.000667103 , 0.0009738 , 0.00136824 , 0.00184947 , 0.00240394 , 0.00300337 , 0.00360529 , 0.00415706 , 0.00460299 , 0.00489354 , 0.00499447 , 0.00489354 , 0.00460299 , 0.00415706 , 0.00360529 , 0.00300337 , 0.00240394 , 0.00184947 , 0.00136824 , 0.0009738 , 0.000667103],
[0.0007692 , 0.00112283 , 0.00157764 , 0.00213252 , 0.00277185 , 0.00346302 , 0.00415706 , 0.00479327 , 0.00530745 , 0.00564247 , 0.00575884 , 0.00564247 , 0.00530745 , 0.00479327 , 0.00415706 , 0.00346302 , 0.00277185 , 0.00213252 , 0.00157764 , 0.00112283 , 0.0007692],
[0.000851711 , 0.00124328 , 0.00174687 , 0.00236128 , 0.00306919 , 0.00383449 , 0.00460299 , 0.00530745 , 0.00587677 , 0.00624773 , 0.00637659 , 0.00624773 , 0.00587677 , 0.00530745 , 0.00460299 , 0.00383449 , 0.00306919 , 0.00236128 , 0.00174687 , 0.00124328 , 0.000851711],
[0.000905473 , 0.00132176 , 0.00185714 , 0.00251033 , 0.00326292 , 0.00407653 , 0.00489354 , 0.00564247 , 0.00624773 , 0.0066421 , 0.0067791 , 0.0066421 , 0.00624773 , 0.00564247 , 0.00489354 , 0.00407653 , 0.00326292 , 0.00251033 , 0.00185714 , 0.00132176 , 0.000905473],
[0.000924149 , 0.00134902 , 0.00189544 , 0.00256211 , 0.00333022 , 0.00416061 , 0.00499447 , 0.00575884 , 0.00637659 , 0.0067791 , 0.00691892 , 0.0067791 , 0.00637659 , 0.00575884 , 0.00499447 , 0.00416061 , 0.00333022 , 0.00256211 , 0.00189544 , 0.00134902 , 0.000924149],
[0.000905473 , 0.00132176 , 0.00185714 , 0.00251033 , 0.00326292 , 0.00407653 , 0.00489354 , 0.00564247 , 0.00624773 , 0.0066421 , 0.0067791 , 0.0066421 , 0.00624773 , 0.00564247 , 0.00489354 , 0.00407653 , 0.00326292 , 0.00251033 , 0.00185714 , 0.00132176 , 0.000905473],
[0.000851711 , 0.00124328 , 0.00174687 , 0.00236128 , 0.00306919 , 0.00383449 , 0.00460299 , 0.00530745 , 0.00587677 , 0.00624773 , 0.00637659 , 0.00624773 , 0.00587677 , 0.00530745 , 0.00460299 , 0.00383449 , 0.00306919 , 0.00236128 , 0.00174687 , 0.00124328 , 0.000851711],
[0.0007692 , 0.00112283 , 0.00157764 , 0.00213252 , 0.00277185 , 0.00346302 , 0.00415706 , 0.00479327 , 0.00530745 , 0.00564247 , 0.00575884 , 0.00564247 , 0.00530745 , 0.00479327 , 0.00415706 , 0.00346302 , 0.00277185 , 0.00213252 , 0.00157764 , 0.00112283 , 0.0007692],
[0.000667103 , 0.0009738 , 0.00136824 , 0.00184947 , 0.00240394 , 0.00300337 , 0.00360529 , 0.00415706 , 0.00460299 , 0.00489354 , 0.00499447 , 0.00489354 , 0.00460299 , 0.00415706 , 0.00360529 , 0.00300337 , 0.00240394 , 0.00184947 , 0.00136824 , 0.0009738 , 0.000667103],
[0.000555727 , 0.000811219 , 0.0011398 , 0.00154069 , 0.00200259 , 0.00250194 , 0.00300337 , 0.00346302 , 0.00383449 , 0.00407653 , 0.00416061 , 0.00407653 , 0.00383449 , 0.00346302 , 0.00300337 , 0.00250194 , 0.00200259 , 0.00154069 , 0.0011398 , 0.000811219 , 0.000555727],
[0.000444813 , 0.000649313 , 0.000912318 , 0.0012332 , 0.00160291 , 0.00200259 , 0.00240394 , 0.00277185 , 0.00306919 , 0.00326292 , 0.00333022 , 0.00326292 , 0.00306919 , 0.00277185 , 0.00240394 , 0.00200259 , 0.00160291 , 0.0012332 , 0.000912318 , 0.000649313 , 0.000444813],
[0.000342216 , 0.000499549 , 0.000701891 , 0.000948759 , 0.0012332 , 0.00154069 , 0.00184947 , 0.00213252 , 0.00236128 , 0.00251033 , 0.00256211 , 0.00251033 , 0.00236128 , 0.00213252 , 0.00184947 , 0.00154069 , 0.0012332 , 0.000948759 , 0.000701891 , 0.000499549 , 0.000342216],
[0.000253172 , 0.000369566 , 0.000519259 , 0.000701891 , 0.000912318 , 0.0011398 , 0.00136824 , 0.00157764 , 0.00174687 , 0.00185714 , 0.00189544 , 0.00185714 , 0.00174687 , 0.00157764 , 0.00136824 , 0.0011398 , 0.000912318 , 0.000701891 , 0.000519259 , 0.000369566 , 0.000253172],
[0.000180187 , 0.000263026 , 0.000369566 , 0.000499549 , 0.000649313 , 0.000811219 , 0.0009738 , 0.00112283 , 0.00124328 , 0.00132176 , 0.00134902 , 0.00132176 , 0.00124328 , 0.00112283 , 0.0009738 , 0.000811219 , 0.000649313 , 0.000499549 , 0.000369566 , 0.000263026 , 0.000180187],
[0.000123437 , 0.000180187 , 0.000253172 , 0.000342216 , 0.000444813 , 0.000555727 , 0.000667103 , 0.0007692 , 0.000851711 , 0.000905473 , 0.000924149 , 0.000905473 , 0.000851711 , 0.0007692 , 0.000667103 , 0.000555727 , 0.000444813 , 0.000342216 , 0.000253172 , 0.000180187 , 0.000123437]])


def gkern(l=5, sig=1.):
    """\
    creates gaussian kernel with side length `l` and a sigma of `sig`
    """
    ax = np.linspace(-(l - 1) / 2., (l - 1) / 2., l)
    gauss = np.exp(-0.5 * np.square(ax) / np.square(sig))
    kernel = np.outer(gauss, gauss)
    return kernel / np.sum(kernel)

from skimage import color, data, restoration, io
o_image = io.imread(fname="~/Code/data/blur_10px.png")
# o_image = data.astronaut() # use this for testing / showing purpose

image = color.rgb2gray(o_image)
from scipy.signal import convolve2d
psf = gkern(20,10) # it should be 21,5 ... but image fails when this kernel is used

blurred = convolve2d(image, psf) # only for testing
blurred = image # if image is already blurred use ONLY this line


deblurs = {"original": o_image, "blurred": blurred}
deblurs["wiener_o"] = restoration.wiener(blurred, psf, balance=0, clip=False)
deblurs["wiener_1"] = restoration.wiener(blurred, psf, balance=1, clip=False)
deblurs["wiener_1000"] = restoration.wiener(blurred, psf, balance=100, clip=False)
#deblurs["unsupervised_wiener"] = restoration.unsupervised_wiener(blurred, psf) # sometimes fails. Please comment out
deblurs["denoise_bilateral"] = restoration.denoise_bilateral(blurred)
deblurs["denoise_nl_means"] = restoration.denoise_nl_means(blurred)
deblurs["denoise_tv_bregman"] = restoration.denoise_tv_bregman(blurred, weight=1)
deblurs["denoise_tv_chambolle"] = restoration.denoise_tv_chambolle(blurred)
deblurs["denoise_wavelet"] = restoration.denoise_wavelet(blurred, sigma=0.1, rescale_sigma=True)
deblurs["richardson_lucy"] = restoration.richardson_lucy(blurred, psf)


fig, ax = plt.subplots(nrows=1, ncols=len(deblurs), figsize=(40, 10),sharex=True, sharey=True)

for i,key in enumerate(deblurs):
    print(key)
    ax[i].imshow(deblurs[key])
    ax[i].axis('off')
    ax[i].set_title(key)

fig.tight_layout()

plt.show()

# if this code does not generate the expeceted result I MUST try Mathematica.
# The do it with a Tikinov Regularizer. This is not supported by skimage yet: http://news.zahlt.info/en/optimization/image-deconvolution-using-tikhonov-regularization/

# However, I tried Mathematica Trial and the deconvolution is HEAVILY dependent on the resolution and on the crop of the image. If you just take a screenshot that for instance has 3 pixels less on the right side,
# the kernel decomposition will fail heavily. You have to EXACTLY have the same image size as the original.
# #
# Also noticeable: Mathematica has 4 modes: DampedLS, Tikonov, Wiener and another one. Wiener performed worse in the example. So these modes are not necessarily interchangeable

